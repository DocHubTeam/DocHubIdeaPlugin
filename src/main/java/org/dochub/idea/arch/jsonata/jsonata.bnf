// https://github.com/JetBrains/Grammar-Kit/blob/master/TUTORIAL.md
{
  tokens = [
    comment="regexp:\/\*[\s\S]*?\*\/"
    space='regexp:\s+'
    string = "regexp:\"[^\"]*\"|'[^']*'"
    number = "regexp:-?(?=[1-9]|0(?!\d))\d+(\.\d+)?([eE][+-]?\d+)?"
    boolean = "regexp:true|false|null"
    id = "regexp:\p{Alpha}+\w*"
    range = "regexp:\[([1-9]|0)+\.\.([1-9]|0)+\]*"
    variable = "regexp:\$([a-z]|[A-Z]|\_)*"
    sys_variable = "regexp:\*\*|\*|\%"
    comma = ","
    colon = ":"
    brace1 = "{"
    brace2 = "}"
    brack1 = "["
    brack2 = "]"
  ]
  extends("array|object|json")=value
}

root ::= jsonata
json ::= array | object  { hooks=[wsBinders="null, null"] }
value ::= jsonata | string | number | boolean  {name="value" hooks=[leftBinder="GREEDY_LEFT_BINDER"]}

array ::= '[' [!']' item (!']' ',' item) *] ']' {pin(".*")=1 extends=json}
private item ::= string | number | boolean | json {recoverWhile=recover}
object ::= '{' [!'}' prop (!'}' ',' prop) *] '}' {pin(".*")=1 extends=json}
prop ::= [] name ':' value {pin=1 recoverWhile=recover} // remove [] to make NAME mandatory
name ::= id | string {name="name" hooks=[rightBinder="GREEDY_RIGHT_BINDER"]}
private recover ::= !(',' | ']' | '}' | '[' | '{')

private jsonata ::= block | function | variable_set | expression

private bind_arr_item ::= '@' variable
private bind_arr_index ::= '#' variable
private bind_arr_variable ::= bind_arr_item [bind_arr_index] | bind_arr_index [bind_arr_item]
private deep_prop ::= (range | sys_variable | variable | name | object | array ) [bind_arr_variable] ( '.' (name | object)) *
private post ::= ('.' (filter | deep_prop )) | ('^(' order_params ')')
private filter ::= deep_prop  '[' expression ']' post *
private function_params ::= variable (',' variable) *
private function_body ::= jsonata *
private function ::= variable ':=' 'function' '(' (function_params|) ')' '{' function_body '}'
private variable_set ::= variable ':=' jsonata;
private block_body ::= jsonata (';' jsonata) *;
private block ::= '(' block_body ')'
private order_param ::= ['>'|'<'] expression
private order_params ::= order_param (',' order_param) *
private order ::= (deep_prop | filter) '^(' order_params ')' post *

private arguments ::= string | number | boolean | order | filter | deep_prop | object | array | expression
private math_operators ::= '+' | '-' | '*' | '/' | '%'
private comp_operators ::= '=' | '!=' | '>' | '<' | '>=' | '<=' | ' in ' | ' and ' | ' or '
private concat_operators ::= '&'
private cond_operators ::= '?' expression ':'
private operators ::= math_operators | comp_operators | concat_operators | cond_operators
private expression ::= arguments (operators arguments) * | '(' expression ')' [operators expression]

