// Метаинформация
{
  // Название и расположение генерируемого класса парсера
  parserClass="org.dochub.idea.arch.jsonata.JSONataParser"
  // Ссылка на базовый класс, от которого будут наследоваться все PSI-элементы(узлы дерева).
  // обычно ASTWrapperPsiElement или его наследники.
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  //префикс классов и интерфейсов(обычно по имени языка) и
  //суффикс для реализации интерфейсов(как правило - Impl)
  psiClassPrefix="JSONata"
  psiImplClassSuffix="Impl"

  //пакет для интерфейсов и их реализаций.
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  // генерируемое хранилище всех типов элементов
  elementTypeHolderClass="org.dochub.idea.arch.jsonata.psi.JSONataTypes"
  // класс типов элементов (не генерируется, наследник IElementType)
  elementTypeClass="org.dochub.idea.arch.jsonata.psi.JSONataElementType"
  //класс для токенов
  tokenTypeClass="org.dochub.idea.arch.jsonata.psi.JSONataTokenType"
  //класс с набором статических методов, которые используются как имплементация требуемых методов для psi-элементов.
  psiImplUtilClass="org.intellij.sdk.language.psi.impl.JSONataPsiImplUtil"
}

// Грамматика языка

root ::= !<<eof>> jsonata

block_item ::= decl_function | set_variable | sys_function | jsonata
block_body ::=  block_item ( [SEMICOLON] block_item )*
block ::= LPARENTH [block_body] [SEMICOLON] [NEW_LINE] RPARENTH

set_variable ::= VARIABLE ASSIGN jsonata
sys_function ::= VARIABLE LPARENTH [jsonata] RPARENTH

array ::= '[' [!']' jsonata (!']' [COMMA] jsonata) *] ']' {pin(".*")=1}
prop ::= [] (ID | STRING | call) COLON (jsonata)*  {pin=1}
object ::= LBRACE [!RBRACE prop  (!RBRACE COMMA prop) *] RBRACE {pin(".*")=1}

func_params ::= [variable (',' variable) *]
decl_function ::= variable ':=' FUNCTION '(' func_params ')' '{' jsonata '}'
call_params ::= [jsonata (',' jsonata) *]
call ::= variable + '(' call_params ')'


private deep_left ::= (ID | VARIABLE | SYS_VARIABLE | STRING | block | call | range | array | object) [modifier]
deep ::= deep_left ('.' ['('] (id | SYS_VARIABLE | call | array | object ) [modifier])*


// path operators
private orderBy ::= ORDER_BY LPARENTH (['>'|'<'] jsonata (COMMA ['>'|'<'] jsonata)*) RPARENTH
private descendants ::= '*''*'
private parent ::= '%' DOT jsonata
private positional_bind ::= POSITIONAL VARIABLE
private context_bind_self ::= CONTEXT VARIABLE
modifier ::= (orderBy | descendants | parent | positional_bind | context_bind_self) *

transform_location ::= id ('.' id)*
transform ::= VERTICAL_BAR transform_location VERTICAL_BAR jsonata [COMMA  array] VERTICAL_BAR
transform_do ::= CHAIN (transform | call | variable)

// numeric operators
private numeric_operators ::= PLUS | MINUS | '*' | QUOTIENT | REMAINDER | range

private base_range ::= LBRACKET jsonata DOUBLE_DOT jsonata RBRACKET
private simple_range ::= LBRACKET jsonata DOUBLE_DOT jsonata (COMMA jsonata DOUBLE_DOT jsonata)* RBRACKET
private complex_range ::= LBRACKET jsonata DOUBLE_DOT sys_function RBRACKET

range ::= base_range | simple_range | complex_range


private comp_operators ::= EQ | NOT_EQ | GREATER | LESS | GREATER_OR_EQUAL | LESS_OR_EQUAL | IN | AND | OR
private concat_operators ::= CONCAT
private cond_operators ::= '?' jsonata ':' [jsonata]
operators ::= cond_operators | numeric_operators | comp_operators | concat_operators | COLON


arguments ::= (NUMBER | call | deep | block | object) [modifier]

jsonata ::= REGEX | CHAIN | transform | arguments (operators arguments | transform_do)* {pin=1}

unusedInBnf ::=  COMMENT | NEW_LINE | DOUBLE_QUOTE | BACKSLASH | QUOTE | BACKTICK | BOOLEAN | QUESTION_MARK