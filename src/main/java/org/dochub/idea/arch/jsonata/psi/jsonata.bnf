// Метаинформация
{
  // Название и расположение генерируемого класса парсера
  parserClass="org.dochub.idea.arch.jsonata.JSONataParser"
  // Ссылка на базовый класс, от которого будут наследоваться все PSI-элементы(узлы дерева).
  // обычно ASTWrapperPsiElement или его наследники.
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  //префикс классов и интерфейсов(обычно по имени языка) и
  //суффикс для реализации интерфейсов(как правило - Impl)
  psiClassPrefix="JSONata"
  psiImplClassSuffix="Impl"

  //пакет для интерфейсов и их реализаций.
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  // генерируемое хранилище всех типов элементов
  elementTypeHolderClass="org.dochub.idea.arch.jsonata.psi.JSONataTypes"
  // класс типов элементов (не генерируется, наследник IElementType)
  elementTypeClass="org.dochub.idea.arch.jsonata.psi.JSONataElementType"
  //класс для токенов
  tokenTypeClass="org.dochub.idea.arch.jsonata.psi.JSONataTokenType"
  //класс с набором статических методов, которые используются как имплементация требуемых методов для psi-элементов.
  psiImplUtilClass="org.intellij.sdk.language.psi.impl.JSONataPsiImplUtil"
}

// Грамматика языка

root ::= !<<eof>> jsonata

jsonata ::= expression (SEMICOLON expression)* SEMICOLON?

expression ::= MINUS? expressionItem (transform | filterExpr | ternaryExpr | orderByExpr | positionalBinding | contextBinding | object | callExpr | binaryOperator MINUS? expressionItem)*

expressionItem ::= substitution | defFunction | filterExpr | block | object | binding | transformRightPart | term

term ::= (LPARENTH expression RPARENTH) | useOfVariableOrFunction | STRING | REGEX | ID | BOOLEAN | MINUS? NUMBER | MUL | REMAINDER

binaryOperator ::= DOT | DOUBLE_DOT | PLUS | MINUS | MUL | QUOTIENT | REMAINDER | CONCAT | IN | EQ | NOT_EQ | GREATER | GREATER_OR_EQUAL | LESS | LESS_OR_EQUAL | OR | AND | CHAIN

substitution ::= QUESTION_MARK

ternaryExpr ::= QUESTION_MARK expression (COLON expression)?

filterExpr ::= LBRACKET filterBody? RBRACKET

filterBody ::= expression (COMMA expression)*

orderByExpr ::= ORDER_BY LPARENTH orderByBody RPARENTH

orderByBody ::= orderByItem (COMMA orderByItem)*

orderByItem ::= (GREATER | LESS)? expression

transform ::= CHAIN VERTICAL_BAR expression transformRightPart

transformRightPart ::= VERTICAL_BAR expression VERTICAL_BAR expression (COMMA expression)* VERTICAL_BAR

contextBinding ::= CONTEXT VARIABLE

positionalBinding ::= POSITIONAL VARIABLE

binding ::= VARIABLE ASSIGN expression
{
    implements=["org.dochub.idea.arch.jsonata.psi.JSONataPsiVariable"]
    mixin="org.dochub.idea.arch.jsonata.psi.mixin.JSONataBindingMixin"
}

object ::= LBRACE objectBody? RBRACE {pin=1}

objectBody ::= objectItem (COMMA objectItem)*

objectItem ::= expression COLON expression {recoverWhile=expr_recover}

block ::= LPARENTH blockBody RPARENTH {pin=1}

blockBody ::= blockItem (SEMICOLON blockItem)* SEMICOLON?

blockItem ::= expression {recoverWhile=expr_recover}

useOfVariableOrFunction ::= ROOT | VARIABLE {
    mixin="org.dochub.idea.arch.jsonata.psi.mixin.JSONataVariableNameMixin"
}

callExpr ::= LPARENTH functionArguments? RPARENTH

functionArguments ::= functionArg (COMMA functionArg)*

functionArg ::= expression

defFunction ::= FUNCTION LPARENTH defFunctionArguments? RPARENTH LBRACE defFunctionBody RBRACE

defFunctionArguments ::= VARIABLE (COMMA (VARIABLE))*

defFunctionBody ::= expression

private expr_recover ::= !(COMMA | SEMICOLON | RPARENTH | RBRACE)

unusedInBnf ::= COMMENT | DOUBLE_QUOTE | BACKSLASH | QUOTE | BACKTICK
